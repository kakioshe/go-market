<style>
/* Always set the map height explicitly to define the size of the div
* element that contains the map. */
#map {
 height: 50vh;
}
</style>
<div>
  <p id="page-title">Edit Product</p>
  <br/>
  <%= form_for @product, :html => { :multipart => true } do |f| %>
  <div class="row cp-form-row">
    <div class="col-sm-3 cp-form-name">Poduct Name </div>
    <div class="col-sm-9"><%= f.text_field :title, class: 'cp-text-field'%></div>
  </div>

  <div class="row cp-form-row">
    <div class="col-sm-3 cp-form-name">Product Category </div>
    <div class="col-sm-9">
      <%= f.collection_select(:categories_id, Category.all, :id, :title, {}, class: "custom-select") %>
    </div>
  </div>
  <div class="row cp-form-row">
    <div class="col-sm-3 cp-form-name">Poduct Picture </div>
    <div class="col-sm-9">
      <div class="row">

        <%= f.fields_for :pictures, @product.picture do |picture_field| %>
          <% if picture_field.object.new_record? %>
          <div class="col-md-4 cp-div-pic cp-div-remove">
            <div class="cp-div-picupload">
              <img src='#' id='pic-uploaded' class="cp-pic-uploaded cp-miss-pic">
            </div>
            <div class="cp-pic-button">
              <div class="">
                <%= picture_field.file_field(:image, accept: 'image/png,image/gif,image/jpeg', id: 'cp-picture') %>
              </div>
              <div class="cp-choose-pic">Choose your picture</div>
  	          <div class='clearfix'></div>
            </div>
          </div>

          <% else %>
          <div class="col-md-4 cp-div-pic cp-div-remove">
            <div class="cp-div-picupload">
              <%= link_to image_tag(picture_field.object.image.url), :class => "cp-remove-pic" %>
            </div>
            <div class="cp-pic-button">
              <div class="cp-picture_field">
                <%= picture_field.file_field(:image, accept: 'image/png,image/gif,image/jpeg', id: 'cp-picture') %>
              </div>
              <div class="cp-choose-pic">Remove</div>
              <div class='clearfix'></div>
            </div>
          </div>
          <% end %>
        <% end %>

      </div>
    </div>
  </div>

  <div class="row cp-form-row">
    <div class="col-sm-3 cp-form-name">Price </div>
    <div class="col-sm-3"><%= f.text_field :price, class: 'cp-text-field' %></div>
    <div class="col-sm-3 cp-form-name">Availability</div>
    <div class="col-sm-3"><%= f.number_field :availability, class: 'cp-text-field', min: "1" %></div>
  </div>

  <div class="row cp-form-row">
    <div class="col-sm-3 cp-form-name">Description </div>
    <div class="col-sm-9"><%= f.text_area :description, class: 'cp-text-field' %></div>
  </div>

  <div class="col-sm-3 cp-form-name">Location</div>
  <%= f.hidden_field :maps, id:'geoloc' %>
  <!-- <%= f.text_field :maps, class: 'controls', id:'pac-input', placeholder:'Search box' %> -->
  <input id="pac-input" class="controls" type="text" placeholder="Search Box">
  <div id="map"></div>

  <%= f.submit :class => 'cp-submit' %>

  <% end %>

</div>

<script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.

// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

function initAutocomplete() {
  var geoloc = document.getElementById('geoloc');
  console.log(geoloc.value);
  var geoloc = geoloc.value.split(",");
  if (isNaN(parseFloat(geoloc[0]))) {
    var currentloc = {lat: -27.4698, lng: 153.0251};
  }
  else {
    var currentloc = {lat: parseFloat(geoloc[0]), lng: parseFloat(geoloc[1])};
  }
  var map = new google.maps.Map(document.getElementById('map'), {
    center: currentloc,
    zoom: 16,
    mapTypeId: 'roadmap'
  });

  var marker = new google.maps.Marker({
    position: currentloc,
    map: map,
    label: 'Current product location'
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      if (!place.geometry) {
        console.log("Returned place contains no geometry");
        return;
      }
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      var geoloc = document.getElementById('geoloc');
      var latlang = place.geometry.location.lat() + ',' + place.geometry.location.lng();
      geoloc.value = latlang;

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });

}
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV["MAPS_API"] %>&callback=initAutocomplete&libraries=places" async defer></script>
